<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--注册Bean-->
    <bean id="userService" class="com.Demo.service.UserServiceImpl"/>
    <bean id="log" class="com.Demo.log.Log"/>
    <bean id="afterLog" class="com.Demo.log.AfterLog"/>

    <!--方式1：使用原生SpringAPI接口-->
    <!--配置AOP:需要导入AOP的约束-->
<!--    <aop:config>
        &lt;!&ndash;切入点：我们需要在哪里执行我们的Spring方法。expression(要执行的位置如：修饰词、返回值、类名、方法名、参数)表达式&ndash;&gt;
        <aop:pointcut id="pointcut" expression="execution(* com.Demo.service.UserServiceImpl.*(..))"/>
        &lt;!&ndash;执行环绕增加&ndash;&gt;
        &lt;!&ndash;意思就是我们把log这个类切入到切入点的方法上面,可以切入多个切入点&ndash;&gt;
        <aop:advisor advice-ref="log" pointcut-ref="pointcut"/>
        <aop:advisor advice-ref="afterLog" pointcut-ref="pointcut"/>
    </aop:config>-->

    <!--方式2：自定义类-->
<!--    <bean id="diy" class="com.Demo.diy.DiyPointCut"/>-->
<!--    <aop:config>-->
<!--        &lt;!&ndash;自定义切面，ref 要引用的类&ndash;&gt;-->
<!--        <aop:aspect ref="diy">-->
<!--            &lt;!&ndash;切入点&ndash;&gt;-->
<!--            <aop:pointcut id="point" expression="execution(* com.Demo.service.UserServiceImpl.*(..))"/>-->
<!--            &lt;!&ndash;通知，类中的方法&ndash;&gt;-->
<!--            <aop:before method="before" pointcut-ref="point"/>-->
<!--            <aop:after method="after" pointcut-ref="point"/>-->
<!--        </aop:aspect>-->
<!--    </aop:config>-->

    <!--方式3：注解实现AOP-->
    <bean id="annotationPointCut" class="com.Demo.diy.AnnotationPointCut"/>
    <!--开启注解支持，自动代理-->
    <aop:aspectj-autoproxy/>

</beans>